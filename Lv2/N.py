# N개의 최소 공배수
# Lv2


# 설명:

# gcd 함수는 두 수의 최대공약수를 구하는 함수입니다. 유클리드 호제법을 사용하여 구현하였습니다.
# lcm 함수는 두 수의 최소공배수를 구하는 함수입니다. 두 수의 곱을 최대공약수로 나누어 최소공배수를 계산합니다.
# solution 함수는 n개의 수가 담긴 배열 arr을 입력받아 최소공배수를 구하는 함수입니다.
# answer 변수를 arr의 첫 번째 수로 초기화합니다.
# arr의 두 번째 수부터 마지막 수까지 반복하면서 lcm 함수를 사용하여 answer와 현재 수의 최소공배수를 계산하고 answer를 갱신합니다.
# 반복이 끝나면 answer에는 n개의 수의 최소공배수가 저장되어 있습니다.
# answer를 반환합니다.
# 이 방법을 사용하면 n개의 수의 최소공배수를 효율적으로 계산할 수 있습니다. 최소공배수는 두 수씩 계산하여 점진적으로 확장해 나가는 방식으로 구할 수 있습니다.

# 예를 들어, arr = [2, 6, 8, 14]인 경우:

# answer를 arr[0]인 2로 초기화합니다.
# arr[1]인 6과 answer의 최소공배수를 계산하면 6이 됩니다. answer를 6으로 갱신합니다.
# arr[2]인 8과 answer의 최소공배수를 계산하면 24가 됩니다. answer를 24로 갱신합니다.
# arr[3]인 14와 answer의 최소공배수를 계산하면 168이 됩니다. answer를 168로 갱신합니다.
# 반복이 끝나고 answer인 168을 반환합니다.
# 따라서 [2, 6, 8, 14]의 최소공배수는 168이 됩니다.


# 유클리드 호제법은 두 수의 최대공약수(Greatest Common Divisor, GCD)를 구하는 알고리즘입니다. 기원전 300년경에 살았던 수학자 유클리드가 고안한 방법으로, 두 수가 서로 상대방 수를 나누어서 결국 원하는 수를 얻는 알고리즘입니다.

# 유클리드 호제법은 다음과 같은 원리를 기반으로 합니다:


# 두 수 a와 b가 있을 때 (a > b), a를 b로 나눈 나머지를 r이라고 합시다.
# 이때 GCD(a, b) = GCD(b, r)이 성립합니다.
# b를 r로 나눈 나머지를 구하고, 위 과정을 반복합니다.
# 나머지가 0이 되면, 그때의 나누는 수가 a와 b의 최대공약수가 됩니다.
# 예를 들어, 78과 32의 최대공약수를 구해보겠습니다.

# 78 = 32 * 2 + 14
# 32 = 14 * 2 + 4
# 14 = 4 * 3 + 2
# 4 = 2 * 2 + 0
# 따라서 78과 32의 최대공약수는 2입니다.


def gcd(a, b):
    while b != 0:
        a, b = b, a % b
    return a

def lcm(a, b):
    return a * b // gcd(a, b)

def solution(arr):
    answer = arr[0]
    for num in arr[1:]:
        answer = lcm(answer, num)
    return answer

print(solution([2,6,8,14]))